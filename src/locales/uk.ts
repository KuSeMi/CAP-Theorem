export default {
  nav: {
    title: 'Пояснення теореми CAP',
    introduction: 'Вступ',
    capDiagram: 'Діаграма CAP',
    simulation: 'Симуляція',
    databases: 'Бази даних',
    conclusion: 'Висновки'
  },
  intro: {
    title: 'Розуміння теореми CAP',
    subtitle: 'Візуальний посібник з розподілених систем',
    description: 'Теорема CAP стверджує, що будь-яка розподілена система може гарантувати максимум дві з наступних трьох властивостей одночасно:',
    getStarted: 'Почати'
  },
  home: {
    threeProperties: 'Три властивості',
    understandingConcepts: 'Розуміння основних концепцій теореми CAP',
    interactiveLearning: 'Інтерактивне навчання',
    exploreDescription: 'Досліджуйте теорему CAP через візуальні симуляції та реальні приклади',
    consistencyTitle: 'Узгодженість (Consistency)',
    consistencyShort: 'Кожне читання отримує найновіший запис або помилку',
    consistencyDetails: 'Детальне пояснення:',
    consistencyLong: 'Усі вузли бачать однакові дані в один і той же час. Коли дані записуються в один вузол, вони повинні бути синхронізовані між усіма вузлами перед тим, як запис вважається успішним.',
    availabilityTitle: 'Доступність (Availability)',
    availabilityShort: 'Кожен запит отримує відповідь без помилки',
    availabilityDetails: 'Детальне пояснення:',
    availabilityLong: 'Система залишається операційною та чутливою до запитів. Кожен запит до непошкодженого вузла повинен повернути розумну відповідь за розумний час.',
    partitionTitle: 'Толерантність до розділення (Partition Tolerance)',
    partitionShort: 'Система продовжує працювати незважаючи на збої мережі',
    partitionDetails: 'Детальне пояснення:',
    partitionLong: 'Система продовжує працювати незважаючи на довільну втрату повідомлень або збій частини системи через розділення мережі.',
    learnMore: 'Дізнатися більше',
    features: {
      interactiveDiagrams: {
        title: 'Інтерактивні діаграми',
        description: 'Візуальний трикутник CAP з інтерактивними властивостями'
      },
      liveSimulations: {
        title: 'Живі симуляції',
        description: 'Моделювання розподілених систем методом перетягування'
      },
      databaseExamples: {
        title: 'Приклади баз даних',
        description: 'Порівняння SQL та NoSQL у реальному світі'
      },
      quickReference: {
        title: 'Швидкий довідник',
        description: 'Ключові висновки та поради для вибору системи'
      }
    }
  },
  cap: {
    title: 'Властивості теореми CAP',
    subtitle: 'Клацніть на будь-які дві властивості, щоб побачити компроміси',
    selectOne: 'Оберіть ще одну властивість',
    selected: 'Обрано: {properties}',
    canSelectTwo: 'Можна обрати лише дві властивості одночасно',
    resetSelection: 'Скинути вибір',
    clickVertices: 'Клацніть на вершини, щоб вибрати властивості',
    consistency: {
      title: 'Узгодженість',
      description: 'Кожне читання отримує найновіший запис або помилку',
      detail: 'Усі вузли бачать однакові дані в один і той же час. Коли дані записуються в один вузол, вони повинні бути синхронізовані між усіма вузлами перед тим, як запис вважається успішним.'
    },
    availability: {
      title: 'Доступність',
      description: 'Кожен запит отримує відповідь без помилки',
      detail: 'Система залишається операційною та чутливою до запитів. Кожен запит до непошкодженого вузла повинен повернути розумну відповідь за розумний час.'
    },
    partition: {
      title: 'Толерантність до розділення',
      description: 'Система продовжує працювати незважаючи на збої мережі',
      detail: 'Система продовжує працювати незважаючи на довільну втрату повідомлень або збій частини системи через розділення мережі.'
    },
    selectTwo: 'Виберіть рівно дві властивості, щоб побачити компроміси',
    tradeOff: 'Компроміс: {missing} піддається компромісу'
  },
  tradeoff: {
    title: 'Компроміс: {combination}',
    whatItMeans: 'Що це означає:',
    guaranteed: 'Гарантовано:',
    compromised: 'Піддається компромісу:',
    databaseExamples: 'Приклади баз даних:',
    useCase: 'Випадок використання',
    systemBehavior: 'Поведінка системи',
    combinations: {
      'CA': 'Узгодженість + Доступність (Без толерантності до розділення)',
      'CP': 'Узгодженість + Толерантність до розділення (Без доступності)',
      'AP': 'Доступність + Толерантність до розділення (Без узгодженості)'
    },
    guarantees: {
      'CA': 'Сильна узгодженість та висока доступність в мережі без розділень. Усі вузли бачать однакові дані та відповідають на запити.',
      'CP': 'Сильна узгодженість навіть коли виникають розділення мережі. Дані залишаються синхронізованими між доступними вузлами.',
      'AP': 'Висока доступність та толерантність до розділення. Система продовжує обслуговувати запити навіть при розділенні мережі.'
    },
    compromises: {
      'CA': 'Коли виникають розділення мережі, система повинна обирати між узгодженістю та доступністю, зазвичай переходячи в автономний режим.',
      'CP': 'Деякі вузли можуть стати недоступними під час розділень для зберігання узгодженості, що зменшує загальну доступність системи.',
      'AP': 'Дані можуть стати тимчасово неузгодженими між вузлами, з врешті-решт досягненням узгодженості з часом.'
    },
    examples: {
      mysql: {
        description: 'Традиційна реляційна БД, яка надає пріоритет ACID властивостям і сильній узгодженості, але може стати недоступною під час проблем з мережею.',
        useCase: 'Банківські системи, фінансові транзакції, електронна комерція'
      },
      postgresql: {
        description: 'Покрощена реляційна БД з ACID сумісністю і гарантіями сильної узгодженості.',
        useCase: 'Корпоративні застосунки, аналітика даних, складні запити'
      },
      mongodb: {
        description: 'Документна БД, яка підтримує сильну узгодженість за замовчуванням, роблячи деякі вузли тільки для читання під час розділень.',
        useCase: 'Управління контентом, аналітика в реальному часі, сучасні веб-застосунки'
      },
      hbase: {
        description: 'Розподілена база даних, яка забезпечує узгодженість даних між регіонами, але може пожертвувати доступністю.',
        useCase: 'Обробка великих даних, доступ читання/запису в реальному часі, IoT'
      },
      cassandra: {
        description: 'Високодоступна розподілена БД, яка продовжує обслуговувати запити з врешті-решт узгодженістю.',
        useCase: 'Дані IoT, часові ряди, системи повідомлень, соціальні мережі'
      },
      dynamodb: {
        description: 'Керована NoSQL база даних, яка надає пріоритет доступності та толерантності з налаштовуваною узгодженістю.',
        useCase: 'Ігрові таблиці лідерів, кошики покупок, зберігання сесій'
      }
    }
  },
  visualization: {
    networkPartition: 'Розділення мережі',
    clusterA: 'Кластер A',
    clusterB: 'Кластер B',
    partitionA: 'Розділ A',
    partitionB: 'Розділ B',
    availableConsistent: 'Доступно і узгоджено',
    partiallyAvailable: 'Частково доступно',
    availableStale: 'Доступно і застаріло',
    unknown: 'Невідомо',
    legend: 'Легенда',
    activeConsistent: 'Активно і узгоджено',
    activeInconsistent: 'Активно і неузгоджено',
    unavailable: 'Недоступно'
  },
  simulation: {
    title: 'Симуляція розподіленої системи',
    subtitle: 'Досліджуйте, як різні системи обробляють мережеві збої та компроміси CAP',
    howToUse: 'Як використовувати цю симуляцію',
    step1Title: 'Оберіть тип системи',
    step1Desc: 'Виберіть CP, AP або CA систему, щоб побачити різну поведінку',
    step2Title: 'Створіть розділення мережі',
    step2Desc: 'Клацніть "Створити розділення", щоб симулювати збій мережі',
    step3Title: 'Спостерігайте за компромісами',
    step3Desc: 'Дивіться, як кожна система по-різному реагує на збої',
    chooseSystem: 'Оберіть тип системи',
    cpDescription: 'Надає пріоритет узгодженості над доступністю',
    apDescription: 'Надає пріоритет доступності над узгодженістю',
    caDescription: 'Потребує ідеальної надійності мережі',
    examples: 'Приклади',
    simulateFailure: 'Симулювати збій мережі',
    partitionExplanation: 'Що таке розділення мережі?',
    partitionDetail: 'Розділення мережі виникає, коли вузли не можуть спілкуватися один з одним, змушуючи систему вибирати між узгодженістю та доступністю.',
    instructions: 'Розсуньте вузли, щоб створити розділення та спостерігайте, як різні системи обробляють компроміси',
    createPartition: 'Створити розділення',
    healPartition: 'Відновити з\'єднання',
    reset: 'Скинути симуляцію',
    nodeStatus: 'Вузол {id} Статус: {status}',
    partitioned: 'Розділений',
    connected: 'Підключений',
    currentSystem: 'Поточна система',
    behaviorDuringPartition: 'Поведінка під час розділення',
    tradeOffs: 'Компроміси',
    whatYouLearn: 'Що ви вивчаєте',
    learnPoint1: 'Як різні системи надають пріоритет властивостям CAP',
    learnPoint2: 'Реальні наслідки збоїв мережі',
    learnPoint3: 'Чому жодна система не може гарантувати всі три властивості',
    quickTips: 'Корисні поради',
    tip1: 'Спробуйте всі три типи систем, щоб порівняти поведінку',
    tip2: 'Слідкуйте за зміною кольорів вузлів під час розділення',
    tip3: 'Зверніть увагу, як версії даних відрізняються в AP системах',
    normalOperation: 'Всі вузли підключені та працюють нормально',
    dragInstruction: 'Спробуйте перетягувати вузли! Клацніть "Створити розділення", щоб побачити реакцію системи',
    dragTip1: 'Клацніть та перетягуйте будь-який пронумерований вузол, щоб переміщувати його',
    dragTip2: 'Переміщення вузлів на різні боки створює розділення мережі',
    dragTip3: 'Слідкуйте за тим, як різні типи систем реагують на ці зміни',
    cpPartitionBehavior: 'CP Система: Деякі вузли стають недоступними для збереження узгодженості',
    apPartitionBehavior: 'AP Система: Всі вузли залишаються доступними, але дані можуть стати неузгодженими',
    caPartitionBehavior: 'CA Система: Система не може переносити розділення - вузли відключаються',
    cpSystemBehavior: 'Підтримує сильну узгодженість, роблячи деякі вузли недоступними під час розділень. Тільки вузли з більшістю можуть обслуговувати запити.',
    apSystemBehavior: 'Залишається повністю доступною, але дозволяє тимчасову неузгодженість. Всі вузли продовжують обслуговувати запити з врешті-решт узгодженістю.',
    caSystemBehavior: 'Потребує відсутності розділень мережі для функціонування. Система може стати недоступною при виникненні розділень.',
    cpTradeoff1: 'Знижена доступність під час розділень мережі',
    cpTradeoff2: 'Гарантії сильної узгодженості',
    cpTradeoff3: 'Може відхиляти запити для збереження цілісності даних',
    apTradeoff1: 'Тимчасова неузгодженість даних між вузлами',
    apTradeoff2: 'Висока доступність навіть при збоях',
    apTradeoff3: 'Врешті-решт узгодженість з часом',
    caTradeoff1: 'Відсутність толерантності до розділень мережі',
    caTradeoff2: 'Сильна узгодженість та доступність',
    caTradeoff3: 'Потенційна єдина точка відмови',
    nodeUnavailable: 'Недоступний',
    nodeConsistent: 'Узгоджений',
    nodeStale: 'Застарілий',
    nodeCurrent: 'Поточний',
    nodeOffline: 'Відключений',
    nodeAvailable: 'Доступний',
    nodeUnknown: 'Невідомий'
  },
  databases: {
    title: 'Приклади баз даних',
    subtitle: 'Як різні бази даних обробляють компроміси CAP',
    selectDatabase: 'Виберіть базу даних, щоб побачити її характеристики CAP',
    capCharacteristics: 'Характеристики CAP',
    databaseLabel: 'База даних',
    systemLabel: 'Система',
    description: 'Опис',
    capProperties: 'Властивості CAP',
    primaryUseCase: 'Основне застосування',
    useCase: 'Застосування',
    keyFeatures: 'Ключові особливості',
    exampleApplications: 'Приклади застосувань',
    capTradeoffSummary: 'Підсумок компромісів CAP',
    levels: {
      high: 'Високий',
      medium: 'Середній',
      low: 'Низький'
    },
    descriptions: {
      consistency: {
        strong: 'Всі читання отримують найновіший запис',
        eventual: 'Узгодженість досягається з часом',
        configurable: 'Рівень узгодженості можна налаштувати'
      },
      availability: {
        high: 'Система залишається операційною більшість часу',
        medium: 'Деякий простій прийнятний під час збоїв',
        low: 'Може мати тривалий простій під час проблем'
      },
      partitionTolerance: {
        high: 'Продовжує роботу незважаючи на збої мережі',
        medium: 'Обмежена робота під час проблем з мережею',
        low: 'Потребує надійного мережевого з\'єднання'
      }
    },
    tradeoffs: {
      ca: {
        title: 'Узгодженість + Доступність (Без толерантності до розділення)',
        description: 'Надає пріоритет сильній узгодженості та доступності, але може зазнати невдач під час розділень мережі.'
      },
      cp: {
        title: 'Узгодженість + Толерантність до розділення (Обмежена доступність)',
        description: 'Підтримує узгодженість даних навіть під час розділень мережі, але може пожертвувати доступністю.'
      },
      ap: {
        title: 'Доступність + Толерантність до розділення (Врешті-решт узгодженість)',
        description: 'Залишається доступною під час розділень мережі, але може мати тимчасові неузгодженості даних.'
      }
    },
    sql: {
      title: 'SQL бази даних',
      description: 'Традиційні реляційні бази даних, що надають перевагу узгодженості',
      mysql: {
        name: 'MySQL',
        description: 'Найпопулярніша відкрита реляційна БД з сильною відповідністю ACID',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Веб-застосунки, електронна комерція, системи управління контентом',
        features: {
          'ACID Compliance': 'Відповідність ACID',
          'SQL Queries': 'SQL запити',
          'Transactions': 'Транзакції',
          'Referential Integrity': 'Референтна цілісність',
          'Replication': 'Реплікація'
        }
      },
      postgresql: {
        name: 'PostgreSQL',
        description: 'Покрощена відкрита БД з розширеними функціями та підтримкою JSON',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Корпоративні застосунки, аналітика даних, складні запити',
        features: {
          'Advanced SQL': 'Посилений SQL',
          'JSON Support': 'Підтримка JSON',
          'Extensions': 'Розширення',
          'Full-text Search': 'Повнотекстовий пошук',
          'Custom Functions': 'Користувацькі функції'
        }
      },
      sqlite: {
        name: 'SQLite',
        description: 'Легка вбудована БД, ідеальна для мобільних та настільних застосунків',
        cap: 'CA (Узгодженість + Доступність)',
        useCase: 'Мобільні застосунки, настільні програми, вбудовані системи, прототипування',
        features: {
          'Serverless': 'Безсерверна',
          'Zero Configuration': 'Нульове конфігурування',
          'Self-contained': 'Автономна',
          'Cross-platform': 'Крос-платформенна'
        }
      },
      oracle: {
        name: 'Oracle Database',
        description: 'Корпоративна БД з покрощеними функціями та високою продуктивністю',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Крупні корпорації, критично важливі застосунки, сховища даних'
      },
      mssql: {
        name: 'Microsoft SQL Server',
        description: 'Корпоративна БД Microsoft з відмінною інтеграцією з Windows',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Екосистема Microsoft, корпоративні застосунки, бізнес-інтелект'
      },
      mariadb: {
        name: 'MariaDB',
        description: 'Відгалуження MySQL з покращеними функціями та кращою продуктивністю',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Веб-застосунки, заміна MySQL, хмарні розгортання'
      },
      cockroachdb: {
        name: 'CockroachDB',
        description: 'Розподілена SQL база даних, розроблена для глобальної узгодженості та стійкості',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Глобальні застосунки, фінансові сервіси, багаторегіональні розгортання'
      }
    },
    nosql: {
      title: 'NoSQL бази даних',
      description: 'Гнучкі бази даних з різними компромісами CAP',
      mongodb: {
        name: 'MongoDB',
        description: 'Популярна документна БД з гнучкою схемою та потужними запитами',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Веб-застосунки, управління контентом, аналітика в реальному часі',
        features: {
          'Document Store': 'Документне сховище',
          'Flexible Schema': 'Гнучка схема',
          'Horizontal Scaling': 'Горизонтальне масштабування',
          'Aggregation Pipeline': 'Pipeline агрегації'
        }
      },
      cassandra: {
        name: 'Apache Cassandra',
        description: 'Розподілена БД, розроблена для високої доступності та масивної масштабованості',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Дані IoT, часові ряди, системи повідомлень, високонавантажені записи'
      },
      redis: {
        name: 'Redis',
        description: 'Сховище структур даних у пам\'яті, використовується як кеш, брокер повідомлень та БД',
        cap: 'CA (Узгодженість + Доступність)',
        useCase: 'Кешування, зберігання сесій, аналітика в реальному часі, черги повідомлень'
      },
      dynamodb: {
        name: 'Amazon DynamoDB',
        description: 'Повністю керований сервіс NoSQL БД з безшовною масштабованістю',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Ігри, мобільні застосунки, веб-застосунки, serverless архітектури'
      },
      elasticsearch: {
        name: 'Elasticsearch',
        description: 'Розподілений пошуковий та аналітичний рушій на основі Apache Lucene',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Повнотекстовий пошук, аналіз логів, моніторинг продуктивності застосунків'
      },
      couchdb: {
        name: 'Apache CouchDB',
        description: 'Документо-орієнтована БД з мульти-мастер реплікацією',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Мобільні застосунки, offline-first застосунки, управління контентом'
      },
      neo4j: {
        name: 'Neo4j',
        description: 'Графова БД, розроблена для пов\'язаних даних та складних відношень',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Соціальні мережі, системи рекомендацій, виявлення шахрайства, аналіз мереж'
      },
      influxdb: {
        name: 'InfluxDB',
        description: 'БД часових рядів, оптимізована для швидкого зберігання з високою доступністю',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Моніторинг IoT, метрики системи, аналітика застосунків, панелі у реальному часі'
      },
      clickhouse: {
        name: 'ClickHouse',
        description: 'Швидка відкрита колонкова БД для аналітики та запитів у реальному часі',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Аналітика в реальному часі, сховища даних, бізнес-інтелект, OLAP'
      },
      scylladb: {
        name: 'ScyllaDB',
        description: 'Високопродуктивна Cassandra-сумісна БД, написана на C++',
        cap: 'AP (Доступність + Толерантність до розділення)',
        useCase: 'Високопропускні застосунки, ігри, IoT, персоналізація в реальному часі'
      },
      faunadb: {
        name: 'FaunaDB',
        description: 'Serverless глобально розподілена БД з ACID транзакціями',
        cap: 'CP (Узгодженість + Толерантність до розділення)',
        useCase: 'Serverless застосунки, JAMstack, глобальні застосунки, функції реального часу'
      }
    },
    comparison: {
      title: 'Порівняння SQL та NoSQL',
      sqlTitle: 'Реляційні бази даних',
      sqlSubtitle: 'Структуровані, узгоджені, надійні',
      nosqlTitle: 'Нереляційні бази даних',
      nosqlSubtitle: 'Гнучкі, масштабовані, різноманітні',
      strengths: 'Ключові переваги',
      limitations: 'Обмеження',
      bestFor: 'Найкраще підходить для',
      decisionGuide: 'Як вибрати?',
      chooseSql: 'Виберіть SQL коли',
      chooseSqlWhen: 'Потрібна сильна узгодженість, складні зв\'язки та ACID транзакції',
      chooseNoSql: 'Виберіть NoSQL коли',
      chooseNoSqlWhen: 'Потрібна висока масштабованість, гнучкість і можна прийняти врешті-решт узгодженість',
      sql: {
        strength1: 'Відповідність ACID забезпечує цілісність даних',
        strength2: 'Зріла екосистема з розширеним інструментарієм',
        strength3: 'Складні запити з JOIN та відношеннями',
        strength4: 'Сильна узгодженість у всіх операціях',
        limitation1: 'Обмежена горизонтальна масштабованість',
        limitation2: 'Жорстка схема потребує планування',
        limitation3: 'Може жертвувати доступністю під час розділень мережі',
        bestFor: 'Банкінг, фінанси, електронна комерція, корпоративні застосунки зі складними зв\'язками'
      },
      nosql: {
        strength1: 'Відмінна горизонтальна масштабованість',
        strength2: 'Гнучка схема адаптується до змін',
        strength3: 'Висока продуктивність для простих операцій',
        strength4: 'Краща доступність під час збоїв мережі',
        limitation1: 'Обмежені можливості складних запитів',
        limitation2: 'Врешті-решт узгодженість може спричинити тимчасові неузгодженості',
        limitation3: 'Менш зрілий інструментарій і стандарти',
        bestFor: 'Великі дані, застосунки реального часу, управління контентом, IoT, соціальні мережі'
      }
    }
  },
  conclusion: {
    title: 'Ключові висновки',
    subtitle: 'Розуміння компромісів у розподілених системах',
    keyTakeaways: 'Основні висновки',
    keyTakeawaysDescription: 'Найважливіші принципи та правила, які потрібно запам\'ятати про теорему CAP',
    quickReference: 'Швидкий довідник CAP',
    choosingSystem: 'Вибір правильної системи',
    testUnderstanding: 'Перевірте своє розуміння',
    continuelearning: 'Продовжуйте навчання',
    readyToDive: 'Готові глибше занурнутись у розподілені системи?',
    reviewCapDiagram: 'Переглянути діаграму CAP',
    trySimulationAgain: 'Спробувати симуляцію знову',
    exploreDatabases: 'Досліджувати бази даних',
    useCase: 'Випадок використання',
    priority: 'Пріоритет',
    recommendedType: 'Рекомендований тип',
    examples: 'Приклади',
    useCases: {
      financialTransactions: 'Фінансові транзакції',
      socialMediaFeed: 'Стрічка соціальних мереж',
      realtimeAnalytics: 'Аналітика в реальному часі',
      iotDataCollection: 'Збір даних IoT',
      ecommerceCatalog: 'Каталог електронної комерції'
    },
    priorities: {
      strongConsistency: 'Сильна узгодженість',
      highAvailability: 'Висока доступність',
      performance: 'Продуктивність',
      scaleAvailability: 'Масштабування та доступність',
      consistencyQueries: 'Узгодженість та запити'
    },
    systemTypes: {
      ca: {
        title: 'CA Системи',
        subtitle: 'Узгодженість + Доступність',
        features: [
          'Традиційні RDBMS',
          'Односерверні бази даних',
          'Відповідність ACID',
          'Без толерантності до розділення'
        ]
      },
      cp: {
        title: 'CP Системи',
        subtitle: 'Узгодженість + Толерантність до розділення',
        features: [
          'MongoDB',
          'HBase',
          'Redis Cluster',
          'Може жертвувати доступністю'
        ]
      },
      ap: {
        title: 'AP Системи',
        subtitle: 'Доступність + Толерантність до розділення',
        features: [
          'Cassandra',
          'DynamoDB',
          'CouchDB',
          'Врешті-решт узгодженість'
        ]
      }
    },
    points: [
      'Жодна розподілена система не може гарантувати всі три властивості CAP одночасно',
      'Виберіть дві властивості на основі вимог вашого застосунку',
      'SQL бази даних зазвичай віддають перевагу узгодженості над доступністю',
      'NoSQL бази даних часто надають перевагу доступності та толерантності до розділення',
      'Вибір залежить від вашого конкретного випадку використання та вимог'
    ],
    learnMore: 'Дізнатися більше',
    resources: 'Додаткові ресурси'
  },
  quiz: {
    question: 'Питання',
    of: 'з',
    correct: 'Правильно!',
    incorrect: 'Неправильно',
    previous: '← Попереднє',
    next: 'Наступне →',
    complete: 'Завершити тест',
    quizComplete: 'Тест завершено!',
    youScored: 'Ваш результат',
    outOf: 'з',
    questionsCorrectly: 'питань правильно',
    takeAgain: 'Пройти тест знову',
    scoreMessages: {
      excellent: 'Відмінно!',
      good: 'Добре!',
      notBad: 'Непогано!',
      keepLearning: 'Продовжуйте навчання!'
    },
    scoreDescriptions: {
      excellent: 'У вас відмінне розуміння теореми CAP та її наслідків.',
      good: 'Ви добре розумієте основи. Перегляньте області, де помилились, щоб поглибити знання.',
      notBad: 'У вас є певне розуміння, але буде корисно повторити концепції.',
      keepLearning: 'Розгляньте можливість повторного вивчення матеріалу для кращого розуміння теореми CAP.'
    },
    questions: [
      {
        question: 'Згідно з теоремою CAP, яка максимальна кількість властивостей, які розподілена система може гарантувати одночасно?',
        options: ['Одну властивість', 'Дві властивості', 'Три властивості', 'Залежить від системи'],
        correctAnswer: 1,
        explanation: 'Теорема CAP стверджує, що розподілена система може гарантувати максимум дві з трьох властивостей (Узгодженість, Доступність, Толерантність до розділення) одночасно.'
      },
      {
        question: 'Який тип бази даних зазвичай класифікується як AP (Доступність + Толерантність до розділення) система?',
        options: ['MySQL', 'PostgreSQL', 'Cassandra', 'Redis (односерверний)'],
        correctAnswer: 2,
        explanation: 'Cassandra розроблена як AP система, яка надає пріоритет доступності та толерантності до розділення, забезпечуючи врешті-решт узгодженість.'
      },
      {
        question: 'Що означає "Узгодженість" у контексті теореми CAP?',
        options: ['Система завжди доступна', 'Кожне читання отримує найновіший запис або помилку', 'Система може обробляти збої мережі', 'Дані зберігаються надійно'],
        correctAnswer: 1,
        explanation: 'Узгодженість у теоремі CAP означає, що кожна операція читання отримує найновіший запис або помилку, забезпечуючи, що всі вузли бачать однакові дані в один і той самий час.'
      },
      {
        question: 'У CP (Узгодженість + Толерантність до розділення) системі під час розділення мережі, що зазвичай відбувається?',
        options: ['Всі вузли залишаються доступними із застарілими даними', 'Деякі вузли стають недоступними для збереження узгодженості', 'Система повністю припиняє роботу', 'Дані автоматично реплікуються'],
        correctAnswer: 1,
        explanation: 'CP системи надають пріоритет узгодженості, тому під час розділення вузли, які не можуть гарантувати актуальні дані, стають недоступними замість того, щоб обслуговувати потенційно застарілу інформацію.'
      },
      {
        question: 'Який сценарій найкраще описує, коли ви вибрали б AP систему замість CP системи?',
        options: ['Банківські транзакції, які потребують точних балансів', 'Стрічки соціальних мереж, де певна затримка прийнятна', 'Управління інвентарем для електронної комерції', 'Фінансові журнали аудиту'],
        correctAnswer: 1,
        explanation: 'AP системи ідеальні для випадків використання, оп стрічки соціальних мереж, де висока доступність важливіша за миттєву узгодженість, і користувачі можуть терпіти перегляд слабко застарілої інформації.'
      }
    ]
  },
  common: {
    loading: 'Завантаження...',
    error: 'Щось пішло не так',
    retry: 'Спробувати знову',
    close: 'Закрити',
    next: 'Далі',
    previous: 'Назад',
    language: 'Мова'
  }
}